#!/bin/bash

TARGET=$1
DEBROOT=$(pwd)

if [ "$(id -u)" != "0" ]; then
	echo "You have to run this as root!"
	exit 1
fi

[ -z "$1" ] && exit 1

read -p "Are you sure $1 is correct device, press enter to continue"


echo "Making rootfs..."
# automated fdisk input: o n p 1 \n \n w, make one msdos part spanning entire drive
printf "o\nn\np\n1\n\n\nw" | fdisk $1
sleep 2
/sbin/partx $1
sleep 2
mkfs.ext4 ${1}1

mount ${1}1 /mnt

if [ -z "$SUITE" ]; then
	debootstrap --arch=arm64 sid /mnt https://deb.debian.org/debian/
else
	debootstrap --arch=arm64 $SUITE /mnt https://deb.debian.org/debian/
fi

echo odroidgo2 > /mnt/etc/hostname
cp $(which qemu-aarch64-static) /mnt/
chroot /mnt/ /qemu-aarch64-static /bin/passwd -d root


export KVER=$(cd $DEBROOT/build/linux/; make kernelversion)

echo "Installing kernel and devicetree..."
cp $DEBROOT/build/linux/arch/arm64/boot/Image /mnt/Image
cp $DEBROOT/build/linux/arch/arm64/boot/dts/rockchip/rk3326-odroid-go2.dtb /mnt/odroidgo2.dtb
make -C $DEBROOT/build/linux ARCH=arm64 INSTALL_MOD_PATH=/mnt/ modules_install
#mkdir -p "/mnt/lib/modules/5.8.13/kernel/drivers/net/wireless/" # TODO: dynamic
#install -Dm644 $DEBROOT/build/esp8089/esp8089.ko "/mnt/lib/modules/5.8.13/kernel/drivers/net/wireless/esp8089.ko"
chroot /mnt/ /qemu-aarch64-static /sbin/depmod -a $KVER

[ "$NETWORKMANAGER" = "Y" ] && chroot /mnt/ /qemu-aarch64-static /bin/apt install -y network-manager # good luck with wifi without networkmanager
#echo "options esp8089 esp_reset_gpio=105" > /mnt/modprobe.d/esp.conf

umount /mnt

echo "Installing Das U-Boot..."

cd build
cd uboot

dd if=idbloader.img of=$1 bs=512 seek=64 status=none
dd if=u-boot.itb of=$1 bs=512 seek=512 status=none
sync

echo 'Done!'
